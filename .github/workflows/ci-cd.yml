name: CI/CD

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up the main toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true
          profile: minimal
          components: rustfmt

      - name: cargo-fmt
        run: cargo fmt --all -- --check

  grcov:
    name: grcov
    runs-on: ubuntu-20.04
    if: ${{ github.repository_owner == 'qryxip' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up the main toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: llvm-tools-preview

      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall

      - name: Install grcov
        run: |
          cargo binstall \
            grcov@=0.8.11 \
            --pkg-url '{ repo }/releases/download/v{ version }/{ name }-{ target }.tar.bz2' \
            --pkg-fmt tbz2 \
            --bin-dir '{ bin }{ binary-ext }' \
            --no-confirm

      - name: cargo-test
        run: cargo test --no-fail-fast -v -- --test-threads 1
        env:
          RUSTFLAGS: '-Cinstrument-coverage'
          RUST_BACKTRACE: full
          LLVM_PROFILE_FILE: '%p-%m.profraw'

      - name: grcov
        run: grcov . -b ./target/debug -s . -t lcov --branch --ignore-not-existing --ignore '/*' -o lcov.info

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info

  build:
    strategy:
      fail-fast: false
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - { target-triple: x86_64-pc-windows-msvc  , os: windows-2022 }
          - { target-triple: x86_64-apple-darwin     , os: macos-11     }
          - { target-triple: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }

    name: ${{ matrix.target-triple }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up the main toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target-triple }}
          profile: minimal
          components: clippy

      - name: cargo-generate-lockfile
        run: cargo generate-lockfile

      - name: rust-cache
        uses: Swatinem/rust-cache@v2

      - name: cargo-clippy
        run: cargo clippy --all-targets --target ${{ matrix.target-triple }} -- -D warnings

      - name: cargo-test
        run: cargo test --no-fail-fast --target ${{ matrix.target-triple }}
        env:
          RUST_BACKTRACE: full

  upload-release-notes:
    name: Upload the release notes
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare release notes
        run: |
          from pathlib import Path

          changelog = Path("./CHANGELOG.md").read_text(encoding="utf_8")
          output = ""
          inside_subsection = False
          for line in changelog.splitlines():
              is_h2 = line.startswith("## ")
              if not inside_subsection and is_h2:
                  inside_subsection = True
              elif inside_subsection and not is_h2:
                  output += line + "\n"
              elif inside_subsection:
                  break
          Path("./release-notes.md").write_text(output, encoding="utf_8")
        shell: python

      - name: Upload the release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  release:
    name: GitHub Release
    runs-on: ubuntu-20.04
    needs: [rustfmt, build, upload-release-notes]

    steps:
      - name: Download the release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes
          path: .

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ./release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
